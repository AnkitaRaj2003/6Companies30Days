//Leetcode: https://leetcode.com/problems/count-number-of-nice-subarrays/description/

-------------BRUTE FORCE-----------------
    int numberOfSubarrays(vector<int>& nums, int k) {
        int ans=0,n=nums.size();
        for(int i=0;i<=n-k;i++){
            int count=0;
            for(int j=i;j<n;j++){
                if(nums[j]%2!=0) count++;
                if(count==k) ans++;
                else if(count>k) break;
            }
        }
        return ans;
    }


----------------------BETTER----------------------
int numberOfSubarrays(vector<int>& nums, int k) {
        int ans=0,n=nums.size(),j=0,c=0,o=0;
        for(int i=0;i<n;i++){
            if(nums[i]%2!=0){
                o++;
                if(o>=k){
                    if(o>k) j++;
                    c = 1;
                    while(nums[j]%2==0){
                        j++;
                        c++;
                    }
                }
            }
            ans+=c;
        }
        return ans;
    }

-------------------OR-------------------
    int numberOfSubarrays(vector<int>& A, int k) {
        return atMost(A, k) - atMost(A, k - 1);
    }

    int atMost(vector<int>& A, int k) {
        int res = 0, i = 0, n = A.size();
        for (int j = 0; j < n; j++) {
            k -= A[j] % 2;
            while (k < 0)
                k += A[i++] % 2;
            res += j - i + 1;
        }
        return res;
    }

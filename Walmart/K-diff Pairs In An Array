//Leetcode: 

---------------------BRUTE FORCE-------------------
TC: O(NLOGN)              SC: O(N)
    int findPairs(vector<int>& nums, int k) {
        set<vector<int>>ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                if(abs(nums[i]-nums[j])==k){
                    vector<int>v;
                    v.push_back(nums[j]);
                    v.push_back(nums[i]);
                    ans.insert(v);
                }
            }
        }
        return ans.size();
    }

-------------------USING MAPS------------------------
TC: O(N)     SC: O(N)
    int findPairs(vector<int>& nums, int k) {
        int ans=0;
        unordered_map<int,int>m;
        for(int i=0;i<nums.size();i++) m[nums[i]]++;
        for(auto x:m){
            if(k==0 && x.second>1) ans++;
            else if(k>0 && m.find(k+x.first)!=m.end()) ans++;
        }
        return ans;
    }

----------------------TWO POINTERS------------------------
TC: O(NLOGN)    SC: O(1)
    int findPairs(vector<int>& nums, int k) {
        int ans=0;
        int i=0,j=1,n=nums.size();
        sort(nums.begin(),nums.end());
        while(i<n && j<n){
            int t = nums[j]-nums[i];
            if(t==k){
                ans++;
                int x = nums[j];
                while(j<n && nums[j]==x) j++;
                x = nums[i];
                while(i<n && nums[i]==x) i++;
                if(i>=j) j=i+1;
            }
            else if(t<k) j++;
            else{
                i++;
                if(j-i==0) j++;
            }
        }
        return ans;
    }

//GFG: 

---------------------------------------------------------------
    int f(int i,int n,string s,unordered_map<string,int>m){
        if(i==n) return 1;
        string temp="";
        for(int j=i;j<n;j++){
            temp+=s[j];
            if(m[temp]>0)
                if(f(j+1,n,s,m)) return 1;
        }
        return 0;
    }
    int wordBreak(string s, vector<string> &B) {
        //code here
        unordered_map<string,int>m;
        for(auto x:B) m[x]++;
        return f(0,s.length(),s,m);
    }

--------------------MEMOIZATION--------------------------
    int f(int i,int n,string s,unordered_map<string,int>m,vector<int>dp){
        if(i==n) return 1;
        if(dp[i]!=-1) return dp[i];
        string temp="";
        for(int j=i;j<n;j++){
            temp+=s[j];
            if(m[temp]>0)
                if(f(j+1,n,s,m,dp)) return dp[i]=1;
        }
        return dp[i]=0;
    }
    int wordBreak(string s, vector<string> &B) {
        //code here
        int n = s.length();
        unordered_map<string,int>m;
        vector<int>dp(n,-1);
        for(auto x:B) m[x]++;
        return f(0,n,s,m,dp);
    }

-----------------------TABULATION----------------------------
    int wordBreak(string s, vector<string> &B) {
        //code here
        int n = s.length();
        unordered_map<string,int>m;
        for(auto x:B) m[x]=1;
        vector<int>dp(n+1,0);
        dp[0]=1;
        for(int i=1;i<=n;i++){
            for(int j=0;j<i;j++){
                if(dp[j]==1 && m[s.substr(j,i-j)]==1){
                    dp[i] = 1;
                    break;
                }
            }
        }
        return dp[n];
    }
